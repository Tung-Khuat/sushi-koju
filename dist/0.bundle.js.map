{"version":3,"sources":["webpack:///./src/components/sushi_preset_full_info/sushi-preset-full-info-display.js"],"names":["useStyles","makeStyles","theme","displayContainer","width","margin","display","flexWrap","card","platterName","maxWidth","displayFlex","displayInlineFlex","ingredientSection","blackText","color","marginBottom","SushiPresetFullInfoDisplay","props","preset","addPresetToCartMethod","itemsInCart","classes","React","useState","orderNumber","setOrderNumber","renderColumnInfo","info","capitalizeFirstLetter","label","content","map","item","i","amount","name","handleOnClick","image","numberOfPieces","price","toFixed","_id","leftInfo","rightInfo","sushiPieceIngredients","length","piece","ingredients"],"mappings":"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","file":"0.bundle.js","sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Typography, Button, TextField, ButtonBase, Grid, Breadcrumbs,\n} from '@material-ui/core';\nimport {\n  ShoppingCart, ArrowBackRounded, Edit, Add, Remove,\n} from '@material-ui/icons';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport PlusMinusInputButton from '../buttons/plus-minus-input-button';\nimport ThumbnailImageCrop from '../image_components/thumbnail-image-crop';\nimport { capitalizeFirstLetter } from '../../assets/helpers/helper-functions-index';\n\n\nconst useStyles = makeStyles((theme) => ({\n  displayContainer: {\n    width: '95%',\n    margin: 'auto',\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  card: {\n    display: 'inline-block',\n    width: 350,\n  },\n  platterName: {\n    maxWidth: '40vw',\n  },\n  displayFlex: {\n    display: 'flex',\n    margin: '15px 0 15px',\n  },\n  displayInlineFlex: {\n    display: 'inline-flex',\n  },\n  ingredientSection: {\n    width: '90%',\n    margin: 'auto',\n  },\n  blackText: {\n    color: '#212529',\n  },\n  marginBottom: {\n    marginBottom: '2rem',\n  },\n}));\n\nexport default function SushiPresetFullInfoDisplay(props) {\n  const { preset, addPresetToCartMethod, itemsInCart } = props;\n  const classes = useStyles();\n  const [orderNumber, setOrderNumber] = React.useState(1);\n\n  function renderColumnInfo(info) {\n    if (info) {\n      return (\n        <Grid item sm={12} md={6}>\n          <strong>{capitalizeFirstLetter(info.label)}</strong>\n          {\n            info.content.map((item, i) => (\n              <div key={i}>{`${item.amount} kpl - ${item.name}`}</div>\n            ))\n          }\n        </Grid>\n      );\n    }\n  }\n\n\n  function handleOnClick() {\n    addPresetToCartMethod(orderNumber, preset);\n  }\n\n  return (\n    <div className=\"platter-full-info-container\">\n      {\n        preset && (\n          <>\n            <Breadcrumbs aria-label=\"breadcrumb\">\n              <span className={classes.blackText}>Olet täällää: </span>\n              <Link color=\"inherit\" to=\"/\">\n                  Etusivu\n              </Link>\n              <Link color=\"inherit\" to=\"/platterit\">\n                  Platterit\n              </Link>\n              <strong className={classes.blackText}>{preset.name}</strong>\n            </Breadcrumbs>\n            <Grid container spacing={2} className={classes.marginBottom}>\n              <Grid item sm={6} lg={5}>\n                <ThumbnailImageCrop src={preset.image} alt={preset.name} customClass=\"cover-cropped\" size=\"100\" unit=\"%\" minWidth=\"280px\" />\n              </Grid>\n              <Grid item className=\"platter-info\" sm={6} lg={6}>\n                <h1 className={classes.platterName}>{capitalizeFirstLetter(preset.name)}</h1>\n                <h4>\n                  {\n                    preset.numberOfPieces && (\n                      <span>{`${preset.numberOfPieces} kpl - `}</span>\n                    )\n                  }\n                  {`Hinta ${preset.price.toFixed(2)} €`}\n                </h4>\n                <Typography variant=\"caption\">{`Product code: ${preset._id}`}</Typography>\n                <div className=\"add-to-cart-group-container\">\n                  <PlusMinusInputButton\n                    defaultInput={orderNumber}\n                    inputUnit=\"kpl\"\n                    onInputChange={setOrderNumber}\n                    customClass={classes.displayInlineFlex}\n                  />\n                  <Button variant=\"contained\" color=\"primary\" className=\"add-to-cart-button\" onClick={handleOnClick}>\n                    <ShoppingCart />\n                    {' '}\n                    Add to Cart\n                  </Button>\n                </div>\n                <Grid container spacing={2}>\n                  {renderColumnInfo(preset.leftInfo)}\n                  {renderColumnInfo(preset.rightInfo)}\n                </Grid>\n              </Grid>\n            </Grid>\n            {\n              preset.sushiPieceIngredients.length > 0 && (\n                <div className=\"ingredient-section\">\n                  <h3>Ingredients</h3>\n                  {preset.sushiPieceIngredients.map((piece, i) => (\n                    <div key={i}>\n                      <strong>{piece.name}</strong>\n                      <p>{`Ingredients: ${piece.ingredients}`}</p>\n                    </div>\n                  ))}\n                </div>\n              )\n            }\n          </>\n        )\n      }\n    </div>\n  );\n}\n"],"sourceRoot":""}